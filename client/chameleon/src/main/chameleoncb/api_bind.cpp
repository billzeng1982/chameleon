/******************************************************************
* author: peter.zhu
* this file is generated by script, do not modify it.
*******************************************************************/
#include<string>
#ifdef __cplusplus
extern "C"{
#endif
#include <lua.h>
#include <lauxlib.h>
#include <android/log.h>
#include "chameleoncb/ChameleonChannelAPI_C.h"

#define  LOG_TAG    "chameleon"
#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define  LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define  LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG,__VA_ARGS__)
#define  LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)
int lua_api_android_log(lua_State *L)
{
    const char * p = lua_tostring(L,1);
    __android_log_print(ANDROID_LOG_INFO, LOG_TAG,"%s", p);
    return 0;
}
extern int loginGuest(int id);
int lua_api_loginGuest(lua_State *L)
{
    int id = lua_tointeger(L,1);
    int __ret__ = 
    loginGuest(
        id
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_registGuest(lua_State *L)
{
    int id = lua_tointeger(L,1);
    const char * tips = lua_tostring(L,2);
    int __ret__ = 
    registGuest(
        id
        , tips
    );
    //lua_pop(L, 2);
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_login(lua_State *L)
{
    int id = lua_tointeger(L,1);
    int __ret__ = 
    login(
        id
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_logout(lua_State *L)
{
    int __ret__ = 
    logout(
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_charge(lua_State *L)
{
    int id = lua_tointeger(L,1);
    const char * orderId = lua_tostring(L,2);
    const char * uidInGame = lua_tostring(L,3);
    const char * userNameInGame = lua_tostring(L,4);
    const char * serverId = lua_tostring(L,5);
    const char * currencyName = lua_tostring(L,6);
    const char * payInfo = lua_tostring(L,7);
    int rate = lua_tointeger(L,8);
    int realPayMoney = lua_tointeger(L,9);
    int isAllowUserChange = lua_tointeger(L,10);
    int __ret__ = 
    charge(
        id
        , orderId
        , uidInGame
        , userNameInGame
        , serverId
        , currencyName
        , payInfo
        , rate
        , realPayMoney
        , isAllowUserChange
    );
    //lua_pop(L, 10);
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_buy(lua_State *L)
{
    int id = lua_tointeger(L,1);
    const char * orderId = lua_tostring(L,2);
    const char * uidInGame = lua_tostring(L,3);
    const char * userNameInGame = lua_tostring(L,4);
    const char * serverId = lua_tostring(L,5);
    const char * productName = lua_tostring(L,6);
    const char * productId = lua_tostring(L,7);
    const char * payInfo = lua_tostring(L,8);
    int productCount = lua_tointeger(L,9);
    int realPayMoney = lua_tointeger(L,10);
    int __ret__ = 
    buy(
        id
        , orderId
        , uidInGame
        , userNameInGame
        , serverId
        , productName
        , productId
        , payInfo
        , productCount
        , realPayMoney
    );
    //lua_pop(L, 10);
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_isSupportSwtichAccount(lua_State *L)
{
    int __ret__ = 
    isSupportSwtichAccount(
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_switchAccount(lua_State *L)
{
    int id = lua_tointeger(L,1);
    int __ret__ = 
    switchAccount(
        id
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_createAndShowToolbar(lua_State *L)
{
    int position = lua_tointeger(L,1);
    int __ret__ = 
    createAndShowToolbar(
        position
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_showToolbar(lua_State *L)
{
    int isVisible = lua_tointeger(L,1);
    showToolbar(
        isVisible
    );
        

    return 0;
}
int lua_api_destroyToolbar(lua_State *L)
{
    destroyToolbar(
    );
        

    return 0;
}
int lua_api_antiAddiction(lua_State *L)
{
    int id = lua_tointeger(L,1);
    int __ret__ = 
    antiAddiction(
        id
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_exit(lua_State *L)
{
    int __ret__ = 
    exit(
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_getChannelName(lua_State *L)
{
    int length = 120;
    char buffer[120]; 
    int __ret__ = 
    getChannelName(
        buffer
        , length
    );
    //lua_pop(L, 2);
        
    lua_pushstring(L, buffer);

    return 1;	
}
int lua_api_getUid(lua_State *L)
{
    int length = 120;
    char buffer[120]; 
    int __ret__ = 
    getUid(
        buffer
        , length
    );
    //lua_pop(L, 2);
        
    lua_pushstring(L, buffer);

    return 1;	
}
int lua_api_getToken(lua_State *L)
{
    int length = 120;
    char buffer[120]; 
    int __ret__ = 
    getToken(
        buffer
        , length
    );
    //lua_pop(L, 2);
        
    lua_pushstring(L, buffer);

    return 1;	
}
int lua_api_getPayToken(lua_State *L)
{
    int length = 120;
    char buffer[120]; 
    int __ret__ = 
    getPayToken(
        buffer
        , length
    );
    //lua_pop(L, 2);
        
    lua_pushstring(L, buffer);

    return 1;	
}
int lua_api_onLoginRsp(lua_State *L)
{
    const char *p = lua_tostring(L,1);
    int __ret__ = 
    onLoginRsp(
        p
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_submitPlayerInfo(lua_State *L)
{
    const char * roleId = lua_tostring(L,1);
    const char * roleName = lua_tostring(L,2);
    const char * roleLevel = lua_tostring(L,3);
    int zoneId = lua_tointeger(L,4);
    const char * zoneName = lua_tostring(L,5);
    int __ret__ = 
    submitPlayerInfo(
        roleId
        , roleName
        , roleLevel
        , zoneId
        , zoneName
    );
    //lua_pop(L, 5);
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_isLogined(lua_State *L)
{
    int __ret__ = 
    isLogined(
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_isSupportProtocol(lua_State *L)
{
    const char * p = lua_tostring(L, 1);
    int __ret__ = 
    isSupportProtocol(
            p
    );
        
    lua_pushinteger(L, __ret__);

    return 1;	
}
int lua_api_runProtocol(lua_State *L)
{
    int id = lua_tointeger(L,1);
    const char * protocol = lua_tostring(L,2);
    const char * message = lua_tostring(L,3);
    int __ret__ = 
    runProtocol(
        id
        , protocol
        , message
    );
    //lua_pop(L, 3);
        
    lua_pushinteger(L, __ret__);

    return 1;	
}

int lua_api_init_callback_binding(lua_State *L)
{
   init_callback_binding();
   return 0;
}


int luaopen_chameleoncb(lua_State*L)
{
    LOGE("luaopen_chameleoncb");
    static luaL_Reg my_lib[] = {
    {"cclog", lua_api_android_log},
    {"registerCallback", lua_api_init_callback_binding},
    { "loginGuest", lua_api_loginGuest},
    { "registGuest", lua_api_registGuest},
    { "login", lua_api_login},
    { "logout", lua_api_logout},
    { "charge", lua_api_charge},
    { "buy", lua_api_buy},
    { "isSupportSwtichAccount", lua_api_isSupportSwtichAccount},
    { "switchAccount", lua_api_switchAccount},
    { "createAndShowToolbar", lua_api_createAndShowToolbar},
    { "showToolbar", lua_api_showToolbar},
    { "destroyToolbar", lua_api_destroyToolbar},
    { "antiAddiction", lua_api_antiAddiction},
    { "exit", lua_api_exit},
    { "getChannelName", lua_api_getChannelName},
    { "getUid", lua_api_getUid},
    { "getToken", lua_api_getToken},
    { "getPayToken", lua_api_getPayToken},
    { "onLoginRsp", lua_api_onLoginRsp},
    { "submitPlayerInfo", lua_api_submitPlayerInfo},
    { "isLogined", lua_api_isLogined},
    { "isSupportProtocol", lua_api_isSupportProtocol},
    { "runProtocol", lua_api_runProtocol},
    {NULL, NULL} };
    static const char * libname = "chameleoncb";
    luaL_register(L, libname, my_lib);
    extern lua_State *g_lua_env;
    g_lua_env = L;
    return 0;
}

#ifdef __cplusplus
}
#endif
